<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">


	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的ShiroDbRealm.java -->
	<beans:bean id="myRealm" class="com.sniper.springmvc.shiro.MyShiro" />
	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
	<beans:bean id="shiroFilter"
		class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<beans:property name="securityManager" ref="securityManager" />
		<!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.jsp"页面 -->
		<beans:property name="loginUrl" value="/doftec/login" />
		<!-- 登录成功后要跳转的连接(本例中此属性用不到,因为登录成功后的处理逻辑在LoginController里硬编码为main.jsp了) -->
		<beans:property name="successUrl" value="/doftec/" />
		<!-- 用户访问未对其授权的资源时,所显示的连接 -->
		<!-- 若想更明显的测试此属性可以修改它的值,如unauthor.jsp,然后用[玄玉]登录后访问/admin/listUser.jsp就看见浏览器会显示unauthor.jsp -->
		<beans:property name="unauthorizedUrl" value="/" />
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
		<!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->
		<!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->
		<!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
		<beans:property name="filterChainDefinitions">
			<beans:value>
				<!-- /doftec/logout=logout 表示直接退出 -->
				/doftec/logout=anon
				/doftec/login=anon
				/verify=anon
				/doftec/**=authc
				/**=kickout
			</beans:value>
		</beans:property>
		<beans:property name="filters">
			<beans:map>
				<beans:entry key="kickout" value-ref="kickout" />
				<beans:entry key="customlogin" value-ref="customlogin" />
			</beans:map>
		</beans:property>
	</beans:bean>
	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
	<!-- 安全管理器 -->
	<beans:bean id="securityManager"
		class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<beans:property name="realm" ref="myRealm" />
		<beans:property name="cacheManager" ref="redisCacheManager" />
		<beans:property name="rememberMeManager" ref="rememberMeManager" />
		<!-- 无法解决很多问题，而且很慢，每次都session活动都会读取几十次缓存 -->
		<beans:property name="sessionManager" ref="sessionManager" />
	</beans:bean>
	<!-- 研究增加自定义session失效的问题 -->
	<!-- 会话管理器,下面做一些修改可以吧session写入redis -->
	<!-- 启用调度老是出问题,应该是版本问题 -->
	<beans:bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<beans:property name="sessionValidationInterval" value="1800000" />
		<beans:property name="sessionDAO" ref="redisSessionDAO" />
		<beans:property name="globalSessionTimeout" value="1800000" />
		<beans:property name="cacheManager" ref="redisCacheManager" />
	</beans:bean>


	<!-- 会话ID生成器 -->
	<beans:bean id="sessionIdGenerator"
		class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />
	<!-- 会话DAO -->
	<beans:bean id="sessionDAO"
		class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
	</beans:bean>
	<!--redis dao -->
	<beans:bean id="redisSessionDAO"
		class="com.sniper.springmvc.shiro.session.redis.RedisSessionDAO">
		<beans:property name="sessionIdGenerator" ref="sessionIdGenerator" />
	</beans:bean>
	<!-- 账号只能登陆统 -->
	<beans:bean id="kickout"
		class="com.sniper.springmvc.shiro.filter.KickoutSessionControlFilter">
		<beans:property name="cacheManager" ref="shiroCacheManager" />
		<beans:property name="kickoutAfter" value="false" />
		<beans:property name="maxSession" value="1" />
		<beans:property name="kickoutUrl" value="/" />
	</beans:bean>

	<beans:bean id="customlogin"
		class="com.sniper.springmvc.shiro.filter.CustomLogonUrl">
		<beans:property name="loginUrl" value="/" />
	</beans:bean>

	<beans:bean id="sessionValidationScheduler"
		class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
		<beans:property name="interval" value="10000" />
		<beans:property name="sessionManager" ref="sessionManager" />
	</beans:bean>


	<beans:bean id="sysuser"
		class="com.sniper.springmvc.shiro.filter.SysUserFilter">
	</beans:bean>

	<beans:bean id="redisCacheManager"
		class="com.sniper.springmvc.shiro.session.redis.RedisCacheManager"></beans:bean>

	<beans:bean id="shiroCacheManager"
		class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<beans:property name="cacheManager" ref="ehcache" />
	</beans:bean>

	<beans:bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<beans:constructor-arg name="name" value="SHAREJSESSIONID" />
		<beans:property name="name" value="smm" />
		<beans:property name="httpOnly" value="true" />
		<beans:property name="maxAge" value="1800000" />
		<beans:property name="path" value="/" />
	</beans:bean>

	<beans:bean id="rememberMeManager"
		class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<beans:property name="cipherKey"
			value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />
		<beans:property name="cookie" ref="sessionIdCookie" />
	</beans:bean>

</beans:beans>