<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<beans:bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<beans:property name="locations">
			<beans:list>
				<beans:value>classpath:properties/jdbc.properties</beans:value>
				<beans:value>classpath:properties/mail.properties</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- 如果 sprinmvc 和 spring ioc 扫描的包有重合就会把类初始化2次 context:component-scan -->
	<!-- Springmvc 的ioc容器中的bean可以引用spring 的ioc容器的bean,反之不可以 -->
	<context:component-scan base-package="com.sniper.springmvc.*">
		<!-- 不扫描的带有这些注解的类 -->
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<!-- 分库配置 master -->
	<beans:bean id="dataSource_main" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<beans:property name="driverClass" value="${jdbc.driverClass}" />
		<beans:property name="jdbcUrl" value="${jdbc.jdbcUrl}" />
		<beans:property name="user" value="${jdbc.user}" />
		<beans:property name="password" value="${jdbc.password}" />
		<!-- 每隔120秒检查连接池里的空闲连接 -->
		<beans:property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}" />
		<beans:property name="preferredTestQuery" value="${c3p0.preferredTestQuery}" />
		<!-- 如果设为true那么在取得连接的同时将校验连接的有效性 。Default: false -->
		<beans:property name="testConnectionOnCheckin" value="${c3p0.testConnectionOnCheckin}" />
		<beans:property name="testConnectionOnCheckout" value="${c3p0.testConnectionOnCheckout}" />
		<!-- 初始化连接数 -->
		<beans:property name="initialPoolSize" value="${c3p0.initialPoolSize}" />
		<!-- 最大连接数 -->
		<beans:property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
		<!-- 最小连接数 -->
		<beans:property name="minPoolSize" value="${c3p0.minPoolSize}" />
		<!-- 当连接池里面的连接用完的时候，C3P0一下获取的新的连接数 -->
		<beans:property name="acquireIncrement" value="${c3p0.acquireIncrement}" />
		<!-- 下面是网上抄的 -->
		<!-- 最大空闲时间 ,120秒内未使用则连接被丢弃。若为0则永不丢弃 -->
		<beans:property name="maxIdleTime" value="${hibernate.c3p0.maxIdleTime}" />
		<!-- 最大的PreparedStatement的数量 -->
		<beans:property name="maxStatements" value="${hibernate.c3p0.maxStatements}" />
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<beans:property name="acquireRetryAttempts"
			value="${hibernate.c3p0.acquireRetryAttempts}" />
		<!--连接关闭时默认将所有未提交的操作回滚。Default: false -->
		<beans:property name="autoCommitOnClose"
			value="${hibernate.c3p0.autoCommitOnClose}" />
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。 
			如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<beans:property name="breakAfterAcquireFailure"
			value="${hibernate.c3p0.breakAfterAcquireFailure}" />
		<!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能通过多线程实现多个操作同时被执行。Default: 
			3 -->
		<beans:property name="numHelperThreads"
			value="${hibernate.c3p0.numHelperThreads}" />
		<!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException,如设为0则无限期等待。Default: 
			0 -->
		<beans:property name="checkoutTimeout"
			value="${hibernate.c3p0.checkoutTimeout}" />
	</beans:bean>

	<!-- 分库配置 slave -->
	<beans:bean id="dataSource_slave" parent="dataSource_main">
		<beans:property name="jdbcUrl" value="${jdbc.jdbcUrlSalve}" />
	</beans:bean>

	<beans:bean id="dataSource_local" parent="dataSource_main">
		<beans:property name="jdbcUrl" value="${jdbc.jdbcUrlLocal}" />
		<beans:property name="user" value="${jdbc.userLocal}" />
		<beans:property name="password" value="${jdbc.passwordLocal}" />
	</beans:bean>

	<beans:bean id="dataSource_stat" parent="dataSource_main">
		<beans:property name="jdbcUrl" value="${jdbc.jdbcUrlStat}" />
		<beans:property name="user" value="${jdbc.userStat}" />
		<beans:property name="password" value="${jdbc.passwordStat}" />
	</beans:bean>

	<!-- 配置数据源路由器 -->
	<beans:bean id="dataSourceRouter"
		class="com.sniper.springmvc.datasource.DataSourceRouter">
		<beans:property name="targetDataSources">
			<beans:map>
				<beans:entry key="master" value-ref="dataSource_main" />
				<beans:entry key="slave" value-ref="dataSource_slave" />
				<beans:entry key="local" value-ref="dataSource_local" />
				<beans:entry key="stat" value-ref="dataSource_stat" />
			</beans:map>
		</beans:property>
		<!-- 默认数据源集合 -->
		<beans:property name="defaultTargetDataSource" ref="dataSource_main" />
	</beans:bean>

	<!-- 配置SqlSessionFactoryBean，引用数据源，typeAliasesPackage自动将实体类自动映射成类名 -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSourceRouter" />
		<beans:property name="configLocation" value="classpath:mybatis-config.xml" />
		<beans:property name="typeAliasesPackage" value="com.sniper.springmvc.model" />
		<beans:property name="mapperLocations"
			value="classpath:com/sniper/springmvc/mybatis/mapping/*.xml" />
	</beans:bean>
	<!-- mybatis自动扫描sql文件 -->
	<!-- <beans:bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> 
		<beans:property name="basePackage" value="com.sniper.springmvc.model" /> 
		<beans:property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" 
		/> </beans:bean> -->

	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg index="0" ref="sqlSessionFactory" />
	</beans:bean>

	<!-- 事务管理器,用来在service层面上实现事务管理,实现平台无关行 -->
	<beans:bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSourceRouter" />
	</beans:bean>

	<!-- 事物通知 -->
	<!-- rollback-for回滚事物，REQUIRED如果存在一个事务，则支持当前事务。如果没有事务则开启 -->
	<!-- aopalliance-1.0 需要这个包否则报错，这个包在struts里面 -->
	<!-- execute 不错日志处理因为问卷关系复杂级联太多,日志进入死循环 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT"
				rollback-for="Exception" />
			<tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT"
				rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT"
				rollback-for="Exception" />
			<tx:method name="batch*" propagation="REQUIRED" isolation="DEFAULT"
				rollback-for="Exception" />
			<tx:method name="execute*" propagation="REQUIRED"
				isolation="DEFAULT" rollback-for="Exception" />
			<tx:method name="get*" propagation="REQUIRED" isolation="DEFAULT"
				read-only="true" rollback-for="Exception" />
			<tx:method name="load*" propagation="REQUIRED" isolation="DEFAULT"
				read-only="true" rollback-for="Exception" />
			<tx:method name="find*" propagation="REQUIRED" isolation="DEFAULT"
				read-only="true" rollback-for="Exception" />

			<!-- <tx:method name="*" propagation="NOT_SUPPORTED" isolation="DEFAULT" 
				read-only="true"/> -->
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception"
				isolation="READ_COMMITTED" />
		</tx:attributes>
	</tx:advice>

	<!-- 切入点通知 -->

	<!-- EhCache library setup -->
	<beans:bean id="ehcache"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
		p:config-location="classpath:ehcache.xml" />

	<beans:bean id="cacheManager"
		class="org.springframework.cache.ehcache.EhCacheCacheManager"
		p:cache-manager-ref="ehcache" />

	<!-- 自定义生成缓存key -->
	<beans:bean id="surveyKey" class="com.sniper.springmvc.cache.SurveyKey" />

	<!-- 配置数据库注解aop -->
	<beans:bean id="manyDataSourceAspect"
		class="com.sniper.springmvc.datasource.DataSourceAspect" />
	<!-- 配置数据库注解aop -->
	<!-- 后台controller环绕计算时间的aop -->
	<beans:bean id="runTimeAdminAspect" class="com.sniper.springmvc.advice.RunTimeAdvice" />
	<!-- 缓存 -->
	<cache:advice id="cacheAdvice" cache-manager="cacheManager"
		key-generator="surveyKey">
		<!-- -->
		<cache:caching cache="SurveyAdminRight">
			<!-- 缓存方法 保存的key -->
			<cache:cacheable method="getC*" />
			<cache:cacheable method="loadC*" />
			<cache:cacheable method="findC*" />

			<!-- 删除缓存的方法 就是当执行下面方法的时候除掉缓存 需要配合aop切入点才管用 -->
			<cache:cache-evict method="save*" all-entries="true" />
			<cache:cache-evict method="update*" all-entries="true" />
			<cache:cache-evict method="delete*" all-entries="true" />
			<cache:cache-evict method="clear*" all-entries="true" />
			<cache:cache-evict method="toggle*" all-entries="true" />
			<cache:cache-evict method="move*" all-entries="true" />
			<cache:cache-evict method="batch*" all-entries="true" />
		</cache:caching>
	</cache:advice>

	<aop:config>
		<!-- order 值越大优先值越低 -->
		<!-- 事务切入点通知 -->
		<aop:advisor advice-ref="txAdvice" pointcut="execution(* *..*Service.*(..))"
			order="11" />
		<!-- 缓存切入点通知 -->
		<aop:advisor advice-ref="cacheAdvice"
			pointcut="(execution(* *..*Service.getC*(..))
											or execution(* *..*Service.findC*(..))
											or execution(* *..*Service.loadC*(..))
											or execution(* *..*Service.save*(..))
											or execution(* *..*Service.update*(..))
											or execution(* *..*Service.delete*(..))
											or execution(* *..*Service.move*(..))
											or execution(* *..*Service.toggle*(..))
											or execution(* *..*Service.clear*(..)))
											and !bean(myUserDetail)
											"
			order="10" />
		<!-- 数据源切换，切入接口 -->
		<aop:aspect id="dataSourceAspect" ref="manyDataSourceAspect"
			order="0">
			<aop:before method="doBefore" pointcut="execution(* *..*Service.*(..))" />
		</aop:aspect>

	</aop:config>

	<beans:bean id="mailSender"
		class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<beans:property name="defaultEncoding" value="${mail.smtp.encoding}" />
		<beans:property name="host" value="${mail.smtp.host}" />
		<beans:property name="username" value="${mail.smtp.username}" />
		<beans:property name="password" value="${mail.smtp.password}" />
		<beans:property name="javaMailProperties">
			<beans:props>
				<!-- 是否开启验证 -->
				<beans:prop key="mail.smtp.auth">${mail.smtp.auth}</beans:prop>
				<beans:prop key="mail.debug">true</beans:prop>
				<!-- 设置发送延迟 -->
				<beans:prop key="mail.smtp.timeout">${mail.smtp.timeout}</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>

	<!-- 设置计划人物扫描 -->
	<task:annotation-driven />

	<!--加载 -->
	<beans:bean id="springContextHelper"
		class="com.sniper.springmvc.security.SpringContextUtil" />

</beans:beans>